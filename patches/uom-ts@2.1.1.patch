diff --git a/dist/index.d.ts b/dist/index.d.ts
index fad1d7eba2707210c4b1c2c1ca24d98694b9ec24..17241b639204322d86f8b0e2e97d0834498786a7 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -3,9 +3,9 @@ declare type NegativeExponent<T extends Exponent> = (T extends -6 ? 6 : T extend
 declare type SumExponents<A extends Exponent, B extends Exponent> = (A extends -6 ? (B extends undefined ? -6 : B extends 1 ? -5 : B extends 2 ? -4 : B extends 3 ? -3 : B extends 4 ? -2 : B extends 5 ? -1 : B extends 6 ? undefined : never) : A extends -5 ? (B extends -1 ? -6 : B extends undefined ? -5 : B extends 1 ? -4 : B extends 2 ? -3 : B extends 3 ? -2 : B extends 4 ? -1 : B extends 5 ? undefined : B extends 6 ? 1 : never) : A extends -4 ? (B extends -2 ? -6 : B extends -1 ? -5 : B extends undefined ? -4 : B extends 1 ? -3 : B extends 2 ? -2 : B extends 3 ? -1 : B extends 4 ? undefined : B extends 5 ? 1 : B extends 6 ? 2 : never) : A extends -3 ? (B extends -3 ? -6 : B extends -2 ? -5 : B extends -1 ? -4 : B extends undefined ? -3 : B extends 1 ? -2 : B extends 2 ? -1 : B extends 3 ? undefined : B extends 4 ? 1 : B extends 5 ? 2 : B extends 6 ? 3 : never) : A extends -2 ? (B extends -4 ? -6 : B extends -3 ? -5 : B extends -2 ? -4 : B extends -1 ? -3 : B extends undefined ? -2 : B extends 1 ? -1 : B extends 2 ? undefined : B extends 3 ? 1 : B extends 4 ? 2 : B extends 5 ? 3 : B extends 6 ? 4 : never) : A extends -1 ? (B extends -5 ? -6 : B extends -4 ? -5 : B extends -3 ? -4 : B extends -2 ? -3 : B extends -1 ? -2 : B extends undefined ? -1 : B extends 1 ? undefined : B extends 2 ? 1 : B extends 3 ? 2 : B extends 4 ? 3 : B extends 5 ? 4 : B extends 6 ? 5 : never) : A extends undefined ? (B extends -6 ? -6 : B extends -5 ? -5 : B extends -4 ? -4 : B extends -3 ? -3 : B extends -2 ? -2 : B extends -1 ? -1 : B extends undefined ? undefined : B extends 1 ? 1 : B extends 2 ? 2 : B extends 3 ? 3 : B extends 4 ? 4 : B extends 5 ? 5 : B extends 6 ? 6 : never) : A extends 1 ? (B extends -6 ? -5 : B extends -5 ? -4 : B extends -4 ? -3 : B extends -3 ? -2 : B extends -2 ? -1 : B extends -1 ? undefined : B extends undefined ? 1 : B extends 1 ? 2 : B extends 2 ? 3 : B extends 3 ? 4 : B extends 4 ? 5 : B extends 5 ? 6 : never) : A extends 2 ? (B extends -6 ? -4 : B extends -5 ? -3 : B extends -4 ? -2 : B extends -3 ? -1 : B extends -2 ? undefined : B extends -1 ? 1 : B extends undefined ? 2 : B extends 1 ? 3 : B extends 2 ? 4 : B extends 3 ? 5 : B extends 4 ? 6 : undefined) : A extends 3 ? (B extends -6 ? -3 : B extends -5 ? -2 : B extends -4 ? -1 : B extends -3 ? undefined : B extends -2 ? 1 : B extends -1 ? 2 : B extends undefined ? 3 : B extends 1 ? 4 : B extends 2 ? 5 : B extends 3 ? 6 : never) : A extends 4 ? (B extends -6 ? -2 : B extends -5 ? -1 : B extends -4 ? undefined : B extends -3 ? 1 : B extends -2 ? 2 : B extends -1 ? 3 : B extends undefined ? 4 : B extends 1 ? 5 : B extends 2 ? 6 : never) : A extends 5 ? (B extends -6 ? -1 : B extends -5 ? undefined : B extends -4 ? 1 : B extends -3 ? 2 : B extends -2 ? 3 : B extends -1 ? 4 : B extends undefined ? 5 : B extends 1 ? 6 : never) : A extends 6 ? (B extends -6 ? undefined : B extends -5 ? 1 : B extends -4 ? 2 : B extends -3 ? 3 : B extends -2 ? 4 : B extends -1 ? 5 : B extends undefined ? 6 : never) : never);
 declare type DivideExponentsBy2<A extends Exponent> = (A extends -6 ? -3 : A extends -4 ? -2 : A extends -2 ? -1 : A extends 2 ? 1 : A extends 4 ? 2 : A extends 6 ? 3 : A extends undefined ? undefined : never);
 declare type SubtractExponents<A extends Exponent, B extends Exponent> = SumExponents<A, NegativeExponent<B>>;
-declare type Exact<A extends object> = A & {
+declare type Exact<A extends object> = Readonly<A & {
     __exactKeys: keyof A;
-};
+}>;
 declare type ObjectWithExponents = {
     [key: string]: Exponent;
 };